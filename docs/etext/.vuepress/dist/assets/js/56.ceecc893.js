(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{485:function(e,t,a){"use strict";a.r(t);var r=a(23),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"lc-3-basic-i-o"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lc-3-basic-i-o"}},[e._v("#")]),e._v(" LC-3 Basic I/O")]),e._v(" "),a("p",[e._v("LC-3 has 1 input and 1 out device. Both devices are built-in, so no additional drivers are needed to access either one")]),e._v(" "),a("p",[e._v("Both devices are Synchronous and Polled")]),e._v(" "),a("h2",{attrs:{id:"keyboard-input"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboard-input"}},[e._v("#")]),e._v(" Keyboard Input")]),e._v(" "),a("p",[e._v("The built-in keyboard input device uses 2 memory-mapped addresses within the LC-3's memory space. Both addresses are near the end of memory space")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Register Mnemonic")]),e._v(" "),a("th",[e._v("Address")]),e._v(" "),a("th",[e._v("Purpose")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("KBSR")]),e._v(" "),a("td",[e._v("0xFE00")]),e._v(" "),a("td",[e._v("KeyBoard Status Register")])]),e._v(" "),a("tr",[a("td",[e._v("KBDR")]),e._v(" "),a("td",[e._v("0xFE02")]),e._v(" "),a("td",[e._v("KeyBoard Data Register")])])])]),e._v(" "),a("h3",{attrs:{id:"keyboard-status-register"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboard-status-register"}},[e._v("#")]),e._v(" KeyBoard Status Register")]),e._v(" "),a("p",[e._v("The KBSR is polled to determine if there is a new character for the program to read. Once the user presses a key on the keyboard, the KBSR is set to a non-zero value")]),e._v(" "),a("blockquote",[a("p",[e._v("In LC-3 Simulate, the user must print the console window to the foreground before pressing a key")])]),e._v(" "),a("p",[e._v("KBSR[15] is set to 1, making the entire register a negative value")]),e._v(" "),a("p",[e._v("KBSR[14-0] and not used")]),e._v(" "),a("p",[e._v("Therefore, to test the KBSR for a keypress is to")]),e._v(" "),a("ol",[a("li",[e._v("Read the KBSR into a register")]),e._v(" "),a("li",[e._v("Check the Condition Code (CC) register\n"),a("ul",[a("li",[e._v("If CC is negative, a key was struck")]),e._v(" "),a("li",[e._v("If CC is positive or zero, loop back and read the KBSR again")])])])]),e._v(" "),a("h3",{attrs:{id:"keyboard-data-register"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyboard-data-register"}},[e._v("#")]),e._v(" KeyBoard Data Register")]),e._v(" "),a("p",[e._v("When a key is pressed on the keyboard, the ASCII value for the key loaded into the KBDR. Next, the KBSR[15] is set to 1")]),e._v(" "),a("p",[e._v("Reading the value is simply loading the data from the KBDR address")]),e._v(" "),a("h3",{attrs:{id:"example-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-code"}},[e._v("#")]),e._v(" Example Code")]),e._v(" "),a("p",[e._v("@"),a("a",{attrs:{href:"./getChar.asm"}},[e._v("code")])]),e._v(" "),a("ul",[a("li",[e._v("Lines 4 and 5 are a simple loop, waiting for KBSR to become negative")]),e._v(" "),a("li",[e._v("Once KBSR[15] is set to 1, and the entire KBSR is negative, the code falls through to line 6, where the KBDR is read into R0")]),e._v(" "),a("li",[e._v("Lines 11 and 12 are data declaration to the KeyBoard Registers")])]),e._v(" "),a("h2",{attrs:{id:"monitor-output"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#monitor-output"}},[e._v("#")]),e._v(" Monitor Output")]),e._v(" "),a("p",[e._v("The monitor works very similar to the keyboard, but, being an output device, the polling loop is checking for something different")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Register Mnemonic")]),e._v(" "),a("th",[e._v("Address")]),e._v(" "),a("th",[e._v("Purpose")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("DSR")]),e._v(" "),a("td",[e._v("0xFE04")]),e._v(" "),a("td",[e._v("Display Status Register")])]),e._v(" "),a("tr",[a("td",[e._v("DDR")]),e._v(" "),a("td",[e._v("0xFE06")]),e._v(" "),a("td",[e._v("Display Data Register")])])])]),e._v(" "),a("p",[e._v("With a polled output device, the program must check with the device to see it it is ready for data. Once ready, the program provides the data and the display is updated")]),e._v(" "),a("h3",{attrs:{id:"display-status-register"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#display-status-register"}},[e._v("#")]),e._v(" Display Status Register")]),e._v(" "),a("p",[e._v("Like the KBSR, the DSR[15] is used to know when the device is ready. When the display device is ready to display a new character, it sets DSR[15] to 1")]),e._v(" "),a("p",[e._v("DSR[14-0] are not used")]),e._v(" "),a("p",[e._v("To test the DSR is ready for a new character")]),e._v(" "),a("ol",[a("li",[e._v("Read the DSR into a register")]),e._v(" "),a("li",[e._v("Check the Condition Code (CC) register\n"),a("ul",[a("li",[e._v("If CC is negative, it is ready")]),e._v(" "),a("li",[e._v("If CC is positive or zero, loop back and read the DSR again")])])])]),e._v(" "),a("h3",{attrs:{id:"display-data-register"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#display-data-register"}},[e._v("#")]),e._v(" Display Data Register")]),e._v(" "),a("p",[e._v("When the display device is ready it sets the DSR[15] to 1. The program can now store the ascii value for the desired character in the DDR")]),e._v(" "),a("p",[e._v("The display device will detect the change in DDR and write the character out to the console")]),e._v(" "),a("h3",{attrs:{id:"example-code-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-code-2"}},[e._v("#")]),e._v(" Example Code")]),e._v(" "),a("p",[e._v("@"),a("a",{attrs:{href:"./setChar.asm"}},[e._v("code")])]),e._v(" "),a("ul",[a("li",[e._v("Lines 5 and 6 are a simple loop, waiting for DSR to become negative")]),e._v(" "),a("li",[e._v("Once DSR[15] is set to 1, and the entire DSR is negative, the code falls through to line 7, where the ascii value in R0 is written to DDR")]),e._v(" "),a("li",[e._v("Lines 14 and 15 are data declaration to the Display Registers")])]),e._v(" "),a("h2",{attrs:{id:"why-check-the-status-register"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why-check-the-status-register"}},[e._v("#")]),e._v(" Why check the Status Register?")]),e._v(" "),a("p",[e._v("Checking the KBSR or DSR are necessary for the program to maintain the synchronous interface agreement the LC-3 defines for Keyboard and Display IO operations")]),e._v(" "),a("p",[e._v("If a program did not check the KBSR before reading data from the KBDR, it may read either")]),e._v(" "),a("ol",[a("li",[e._v("Zeros because no key had been pressed yet")]),e._v(" "),a("li",[e._v("The value of a previous keyboard interaction because the user has not press a new key yet")])]),e._v(" "),a("p",[e._v("Skipping the DSR check may result in corrupting the last data sent to the display, that is still being processed by the display device yet")])])}),[],!1,null,null,null);t.default=s.exports}}]);