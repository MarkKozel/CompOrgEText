(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{461:function(t,a,n){"use strict";n.r(a);var s=n(23),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"frontmatter-title"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),n("p",[n("strong",[t._v(t._s(t.$frontmatter.description))])]),t._v(" "),n("KeyConcepts",{attrs:{ConceptArray:[{Concept:"Sequential Flow",Details:"Program execution in order, without any variation"},{Concept:"Conditional Flow",Details:"A single decision point in the program that will execute or skip a section of the code"},{Concept:"Iterative Flow",Details:"Repeating a section of code more than once, often with different data each time"}]}}),t._v(" "),n("h2",{attrs:{id:"introduction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),n("h2",{attrs:{id:"sequential-flow"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sequential-flow"}},[t._v("#")]),t._v(" Sequential Flow")]),t._v(" "),n("p",[t._v("A program executing in sequence is not changing flow. It is executing each instruction in order from first to last")]),t._v(" "),n("p",[t._v("While the program is performing operations on data from user input and/or data stored in memory, it is not jumping around in the code based on the data")]),t._v(" "),n("p",[n("em",[t._v("Simple sequential program in Java and LC-3 Assembly")]),t._v("\n:::: code-group\n::: code-group-item Java")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresult "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v(":::\n::: code-group-item LC-3")]),t._v(" "),n("div",{staticClass:"language-asm extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(".ORIG x3000\n\n   LD R2, X\n   ADD R2, R2, #15\n   ADD R3, R2, R2\n   ST R3, Result\n\n   HALT\n.END\n\nResult .FILL #0\nX .FILL #15\n")])])]),n("p",[t._v(":::\n::::")]),t._v(" "),n("p",[t._v("These two code examples run top to bottom with no change in flow")]),t._v(" "),n("p",[n("img",{attrs:{src:"/images/AssemblyProgramming/ProgramFlow/Diagram_Sequential.png",alt:"Sequential Flow Diagram"}})]),t._v(" "),n("h2",{attrs:{id:"conditional-flow"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conditional-flow"}},[t._v("#")]),t._v(" Conditional Flow")]),t._v(" "),n("p",[t._v("In conditional flow, the program can execute or skip 1 or more lines of code based on a condition. The condition is evaluated while the program is running. In this way, the same program can execute differently, based on data or user inputs, each time it runs")]),t._v(" "),n("p",[n("strong",[t._v("Conditions")]),t._v(" are the result of comparing data with another data items, or to a range of values. The condition typically results in a true/false state")]),t._v(" "),n("details",{staticClass:"custom-block details"},[n("summary",[t._v("Example Comparisons")]),t._v(" "),n("ul",[n("li",[t._v("data is the same as a single value  "),n("code",[t._v("x = 17")])]),t._v(" "),n("li",[t._v("data is larger that a value         "),n("code",[t._v("x > 16")])]),t._v(" "),n("li",[t._v("data within a range of values       "),n("code",[t._v("x > 16 && x < 87")])])]),t._v(" "),n("p",[t._v("In each case, the comparison is either true or false")])]),t._v(" "),n("p",[t._v("With the Condition evaluated, the program will execute or skip certain code if the condition is "),n("code",[t._v("true")]),t._v(". Otherwise, the program will continue executing in a sequential flow")]),t._v(" "),n("p",[n("img",{attrs:{src:"/images/AssemblyProgramming/ProgramFlow/Diagram_Conditional.png",alt:"Conditional Flow Diagram"}})]),t._v(" "),n("h3",{attrs:{id:"if-branch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#if-branch"}},[t._v("#")]),t._v(" IF Branch")]),t._v(" "),n("p",[t._v("A program can evaluate a condition, such as an arithmetic or logical comparison between values. Based on that condition, the code may skip a section of code that does not pertain to the condition")]),t._v(" "),n("p",[n("em",[t._v("Simple conditional 'if'  program in Java and LC-3 Assembly")]),t._v("\n:::: code-group\n::: code-group-item Java")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),t._v(" myObj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Enter age"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" userAge "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myObj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("userAge "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You entered a valid age"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v(":::\n::: code-group-item Assembly")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('.ORIG x3000\n  LEA R0, enterAge\n  PUTS\n  IN\n  JSR convertToInt ; subroutine to convert input into a number and save in R1\n  BRp Valid ; Based on CC register set by convertToInt\n  BRnz Done\n\n  Valid LEA R0, goodAge\n  PUTS\n\n  Done HALT\n.END\n\nenterAge .STRINGZ "Enter age"\ngoodAge .STRINGZ "You entered a valid age"\n')])])]),n("p",[t._v(":::\n::::")]),t._v(" "),n("h3",{attrs:{id:"if-else-branch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#if-else-branch"}},[t._v("#")]),t._v(" If/Else Branch")]),t._v(" "),n("p",[t._v("The program may choose between 2 separate code sections based on a condition")]),t._v(" "),n("p",[n("em",[t._v("Simple conditional 'if/else'  program in Java and LC-3 Assembly")]),t._v("\n:::: code-group\n::: code-group-item Java")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),t._v(" myObj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Scanner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Enter age"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" userAge "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" myObj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("userAge "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You entered a valid age"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You entered an invalid age"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v(":::\n::: code-group-item Assembly")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('.ORIG x3000\n  LEA R0, enterAge\n  PUTS\n  IN\n  JSR convertToInt ; subroutine to convert input into a number and save in R1\n  BRp Valid ; Based on CC register set by convertToInt\n  BRnz Invalid\n\n  Valid LEA R0, goodAge\n    PUTS\n    BR Done\n\n  Invalid LEA R0, badAge\n    PUTS\n\n  Done HALT\n.END\n\nenterAge .STRINGZ "Enter age"\ngoodAge .STRINGZ "You entered a valid age"\nbadAge .STRINGZ "You entered an invalid age"\n')])])]),n("p",[t._v(":::\n::::")]),t._v(" "),n("p",[t._v("Other conditionals constructs, such as Switch, While, and Do/While are based on these same Condition check and change in flow")]),t._v(" "),n("h2",{attrs:{id:"iterative-flow"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#iterative-flow"}},[t._v("#")]),t._v(" Iterative Flow")]),t._v(" "),n("p",[t._v("A program can execute a section of code multiple times. This is common in arithmetic function and database processing")]),t._v(" "),n("p",[t._v("The number of iteration (number of times the section runs) can be a built-in value or based on user or external inputs")]),t._v(" "),n("p",[n("img",{attrs:{src:"/images/AssemblyProgramming/ProgramFlow/Diagram_Iterative.png",alt:"Iterative Flow Diagram"}})]),t._v(" "),n("h3",{attrs:{id:"for-loop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for-loop"}},[t._v("#")]),t._v(" For Loop")]),t._v(" "),n("p",[t._v(":::: code-group\n::: code-group-item Java")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nx "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Add current value if i to x")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v(":::\n::: code-group-item Assembly")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(".ORIG x3000\n  ADD R1, R1, #0; int x = 0\n  ADD R2, R2, #0; int i = 0;\nloop   \n\n  Done HALT\n.END\n\n\n")])])]),n("p",[t._v(":::\n::::")]),t._v(" "),n("h2",{attrs:{id:"conclusion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[t._v("#")]),t._v(" Conclusion")])],1)}),[],!1,null,null,null);a.default=e.exports}}]);